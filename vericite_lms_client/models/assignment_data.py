# coding: utf-8

"""
    VeriCiteLmsApiV1

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AssignmentData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, assignment_title=None, assignment_instructions=None, assignment_exclude_quotes=None, assignment_exclude_self_plag=None, assignment_store_in_index=None, assignment_due_date=None, assignment_grade=None, assignment_attachment_external_content=None):
        """
        AssignmentData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'assignment_title': 'str',
            'assignment_instructions': 'str',
            'assignment_exclude_quotes': 'bool',
            'assignment_exclude_self_plag': 'bool',
            'assignment_store_in_index': 'bool',
            'assignment_due_date': 'int',
            'assignment_grade': 'int',
            'assignment_attachment_external_content': 'list[ExternalContentData]'
        }

        self.attribute_map = {
            'assignment_title': 'assignmentTitle',
            'assignment_instructions': 'assignmentInstructions',
            'assignment_exclude_quotes': 'assignmentExcludeQuotes',
            'assignment_exclude_self_plag': 'assignmentExcludeSelfPlag',
            'assignment_store_in_index': 'assignmentStoreInIndex',
            'assignment_due_date': 'assignmentDueDate',
            'assignment_grade': 'assignmentGrade',
            'assignment_attachment_external_content': 'assignmentAttachmentExternalContent'
        }

        self._assignment_title = assignment_title
        self._assignment_instructions = assignment_instructions
        self._assignment_exclude_quotes = assignment_exclude_quotes
        self._assignment_exclude_self_plag = assignment_exclude_self_plag
        self._assignment_store_in_index = assignment_store_in_index
        self._assignment_due_date = assignment_due_date
        self._assignment_grade = assignment_grade
        self._assignment_attachment_external_content = assignment_attachment_external_content

    @property
    def assignment_title(self):
        """
        Gets the assignment_title of this AssignmentData.
        The title of the assignment

        :return: The assignment_title of this AssignmentData.
        :rtype: str
        """
        return self._assignment_title

    @assignment_title.setter
    def assignment_title(self, assignment_title):
        """
        Sets the assignment_title of this AssignmentData.
        The title of the assignment

        :param assignment_title: The assignment_title of this AssignmentData.
        :type: str
        """

        self._assignment_title = assignment_title

    @property
    def assignment_instructions(self):
        """
        Gets the assignment_instructions of this AssignmentData.
        Instructions for assignment

        :return: The assignment_instructions of this AssignmentData.
        :rtype: str
        """
        return self._assignment_instructions

    @assignment_instructions.setter
    def assignment_instructions(self, assignment_instructions):
        """
        Sets the assignment_instructions of this AssignmentData.
        Instructions for assignment

        :param assignment_instructions: The assignment_instructions of this AssignmentData.
        :type: str
        """

        self._assignment_instructions = assignment_instructions

    @property
    def assignment_exclude_quotes(self):
        """
        Gets the assignment_exclude_quotes of this AssignmentData.
        exclude quotes

        :return: The assignment_exclude_quotes of this AssignmentData.
        :rtype: bool
        """
        return self._assignment_exclude_quotes

    @assignment_exclude_quotes.setter
    def assignment_exclude_quotes(self, assignment_exclude_quotes):
        """
        Sets the assignment_exclude_quotes of this AssignmentData.
        exclude quotes

        :param assignment_exclude_quotes: The assignment_exclude_quotes of this AssignmentData.
        :type: bool
        """

        self._assignment_exclude_quotes = assignment_exclude_quotes

    @property
    def assignment_exclude_self_plag(self):
        """
        Gets the assignment_exclude_self_plag of this AssignmentData.
        exclude self plagiarism

        :return: The assignment_exclude_self_plag of this AssignmentData.
        :rtype: bool
        """
        return self._assignment_exclude_self_plag

    @assignment_exclude_self_plag.setter
    def assignment_exclude_self_plag(self, assignment_exclude_self_plag):
        """
        Sets the assignment_exclude_self_plag of this AssignmentData.
        exclude self plagiarism

        :param assignment_exclude_self_plag: The assignment_exclude_self_plag of this AssignmentData.
        :type: bool
        """

        self._assignment_exclude_self_plag = assignment_exclude_self_plag

    @property
    def assignment_store_in_index(self):
        """
        Gets the assignment_store_in_index of this AssignmentData.
        store submissions in institutional index

        :return: The assignment_store_in_index of this AssignmentData.
        :rtype: bool
        """
        return self._assignment_store_in_index

    @assignment_store_in_index.setter
    def assignment_store_in_index(self, assignment_store_in_index):
        """
        Sets the assignment_store_in_index of this AssignmentData.
        store submissions in institutional index

        :param assignment_store_in_index: The assignment_store_in_index of this AssignmentData.
        :type: bool
        """

        self._assignment_store_in_index = assignment_store_in_index

    @property
    def assignment_due_date(self):
        """
        Gets the assignment_due_date of this AssignmentData.
        Assignment due date. Pass in 0 to delete.

        :return: The assignment_due_date of this AssignmentData.
        :rtype: int
        """
        return self._assignment_due_date

    @assignment_due_date.setter
    def assignment_due_date(self, assignment_due_date):
        """
        Sets the assignment_due_date of this AssignmentData.
        Assignment due date. Pass in 0 to delete.

        :param assignment_due_date: The assignment_due_date of this AssignmentData.
        :type: int
        """

        self._assignment_due_date = assignment_due_date

    @property
    def assignment_grade(self):
        """
        Gets the assignment_grade of this AssignmentData.
        Assignment grade. Pass in 0 to delete.

        :return: The assignment_grade of this AssignmentData.
        :rtype: int
        """
        return self._assignment_grade

    @assignment_grade.setter
    def assignment_grade(self, assignment_grade):
        """
        Sets the assignment_grade of this AssignmentData.
        Assignment grade. Pass in 0 to delete.

        :param assignment_grade: The assignment_grade of this AssignmentData.
        :type: int
        """

        self._assignment_grade = assignment_grade

    @property
    def assignment_attachment_external_content(self):
        """
        Gets the assignment_attachment_external_content of this AssignmentData.


        :return: The assignment_attachment_external_content of this AssignmentData.
        :rtype: list[ExternalContentData]
        """
        return self._assignment_attachment_external_content

    @assignment_attachment_external_content.setter
    def assignment_attachment_external_content(self, assignment_attachment_external_content):
        """
        Sets the assignment_attachment_external_content of this AssignmentData.


        :param assignment_attachment_external_content: The assignment_attachment_external_content of this AssignmentData.
        :type: list[ExternalContentData]
        """

        self._assignment_attachment_external_content = assignment_attachment_external_content

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
