# coding: utf-8

"""
    VeriCiteLmsApiV1

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ExternalContentUploadInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, external_content_id=None, url_post=None, file_path=None, content_length=None, content_type=None):
        """
        ExternalContentUploadInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'external_content_id': 'str',
            'url_post': 'str',
            'file_path': 'str',
            'content_length': 'int',
            'content_type': 'str'
        }

        self.attribute_map = {
            'external_content_id': 'externalContentID',
            'url_post': 'urlPost',
            'file_path': 'filePath',
            'content_length': 'contentLength',
            'content_type': 'contentType'
        }

        self._external_content_id = external_content_id
        self._url_post = url_post
        self._file_path = file_path
        self._content_length = content_length
        self._content_type = content_type

    @property
    def external_content_id(self):
        """
        Gets the external_content_id of this ExternalContentUploadInfo.
        ID used to ID the uploaded file

        :return: The external_content_id of this ExternalContentUploadInfo.
        :rtype: str
        """
        return self._external_content_id

    @external_content_id.setter
    def external_content_id(self, external_content_id):
        """
        Sets the external_content_id of this ExternalContentUploadInfo.
        ID used to ID the uploaded file

        :param external_content_id: The external_content_id of this ExternalContentUploadInfo.
        :type: str
        """

        self._external_content_id = external_content_id

    @property
    def url_post(self):
        """
        Gets the url_post of this ExternalContentUploadInfo.
        URL to submit the attachment to

        :return: The url_post of this ExternalContentUploadInfo.
        :rtype: str
        """
        return self._url_post

    @url_post.setter
    def url_post(self, url_post):
        """
        Sets the url_post of this ExternalContentUploadInfo.
        URL to submit the attachment to

        :param url_post: The url_post of this ExternalContentUploadInfo.
        :type: str
        """

        self._url_post = url_post

    @property
    def file_path(self):
        """
        Gets the file_path of this ExternalContentUploadInfo.
        The file path

        :return: The file_path of this ExternalContentUploadInfo.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """
        Sets the file_path of this ExternalContentUploadInfo.
        The file path

        :param file_path: The file_path of this ExternalContentUploadInfo.
        :type: str
        """

        self._file_path = file_path

    @property
    def content_length(self):
        """
        Gets the content_length of this ExternalContentUploadInfo.
        The length of the file

        :return: The content_length of this ExternalContentUploadInfo.
        :rtype: int
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """
        Sets the content_length of this ExternalContentUploadInfo.
        The length of the file

        :param content_length: The content_length of this ExternalContentUploadInfo.
        :type: int
        """

        self._content_length = content_length

    @property
    def content_type(self):
        """
        Gets the content_type of this ExternalContentUploadInfo.
        The files content type

        :return: The content_type of this ExternalContentUploadInfo.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this ExternalContentUploadInfo.
        The files content type

        :param content_type: The content_type of this ExternalContentUploadInfo.
        :type: str
        """

        self._content_type = content_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
