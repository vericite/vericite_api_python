# coding: utf-8

"""
    VeriCiteLmsApiV1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ReportScoreReponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, assignment=None, external_content_id=None, preliminary=None, score=None, user=None):
        """
        ReportScoreReponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'assignment': 'str',
            'external_content_id': 'str',
            'preliminary': 'bool',
            'score': 'int',
            'user': 'str'
        }

        self.attribute_map = {
            'assignment': 'assignment',
            'external_content_id': 'externalContentId',
            'preliminary': 'preliminary',
            'score': 'score',
            'user': 'user'
        }

        self._assignment = assignment
        self._external_content_id = external_content_id
        self._preliminary = preliminary
        self._score = score
        self._user = user


    @property
    def assignment(self):
        """
        Gets the assignment of this ReportScoreReponse.


        :return: The assignment of this ReportScoreReponse.
        :rtype: str
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """
        Sets the assignment of this ReportScoreReponse.


        :param assignment: The assignment of this ReportScoreReponse.
        :type: str
        """

        self._assignment = assignment

    @property
    def external_content_id(self):
        """
        Gets the external_content_id of this ReportScoreReponse.


        :return: The external_content_id of this ReportScoreReponse.
        :rtype: str
        """
        return self._external_content_id

    @external_content_id.setter
    def external_content_id(self, external_content_id):
        """
        Sets the external_content_id of this ReportScoreReponse.


        :param external_content_id: The external_content_id of this ReportScoreReponse.
        :type: str
        """

        self._external_content_id = external_content_id

    @property
    def preliminary(self):
        """
        Gets the preliminary of this ReportScoreReponse.


        :return: The preliminary of this ReportScoreReponse.
        :rtype: bool
        """
        return self._preliminary

    @preliminary.setter
    def preliminary(self, preliminary):
        """
        Sets the preliminary of this ReportScoreReponse.


        :param preliminary: The preliminary of this ReportScoreReponse.
        :type: bool
        """

        self._preliminary = preliminary

    @property
    def score(self):
        """
        Gets the score of this ReportScoreReponse.


        :return: The score of this ReportScoreReponse.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """
        Sets the score of this ReportScoreReponse.


        :param score: The score of this ReportScoreReponse.
        :type: int
        """

        self._score = score

    @property
    def user(self):
        """
        Gets the user of this ReportScoreReponse.


        :return: The user of this ReportScoreReponse.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this ReportScoreReponse.


        :param user: The user of this ReportScoreReponse.
        :type: str
        """

        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
