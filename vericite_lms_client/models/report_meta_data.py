# coding: utf-8

"""
    VeriCiteLmsApiV1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ReportMetaData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, assignment_title=None, context_title=None, external_content_data=None, user_email=None, user_first_name=None, user_last_name=None, user_role=None):
        """
        ReportMetaData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'assignment_title': 'str',
            'context_title': 'str',
            'external_content_data': 'list[ExternalContentData]',
            'user_email': 'str',
            'user_first_name': 'str',
            'user_last_name': 'str',
            'user_role': 'str'
        }

        self.attribute_map = {
            'assignment_title': 'assignmentTitle',
            'context_title': 'contextTitle',
            'external_content_data': 'externalContentData',
            'user_email': 'userEmail',
            'user_first_name': 'userFirstName',
            'user_last_name': 'userLastName',
            'user_role': 'userRole'
        }

        self._assignment_title = assignment_title
        self._context_title = context_title
        self._external_content_data = external_content_data
        self._user_email = user_email
        self._user_first_name = user_first_name
        self._user_last_name = user_last_name
        self._user_role = user_role


    @property
    def assignment_title(self):
        """
        Gets the assignment_title of this ReportMetaData.
        Title of Assignment

        :return: The assignment_title of this ReportMetaData.
        :rtype: str
        """
        return self._assignment_title

    @assignment_title.setter
    def assignment_title(self, assignment_title):
        """
        Sets the assignment_title of this ReportMetaData.
        Title of Assignment

        :param assignment_title: The assignment_title of this ReportMetaData.
        :type: str
        """

        self._assignment_title = assignment_title

    @property
    def context_title(self):
        """
        Gets the context_title of this ReportMetaData.
        Title of Context

        :return: The context_title of this ReportMetaData.
        :rtype: str
        """
        return self._context_title

    @context_title.setter
    def context_title(self, context_title):
        """
        Sets the context_title of this ReportMetaData.
        Title of Context

        :param context_title: The context_title of this ReportMetaData.
        :type: str
        """

        self._context_title = context_title

    @property
    def external_content_data(self):
        """
        Gets the external_content_data of this ReportMetaData.


        :return: The external_content_data of this ReportMetaData.
        :rtype: list[ExternalContentData]
        """
        return self._external_content_data

    @external_content_data.setter
    def external_content_data(self, external_content_data):
        """
        Sets the external_content_data of this ReportMetaData.


        :param external_content_data: The external_content_data of this ReportMetaData.
        :type: list[ExternalContentData]
        """
        if external_content_data is None:
            raise ValueError("Invalid value for `external_content_data`, must not be `None`")

        self._external_content_data = external_content_data

    @property
    def user_email(self):
        """
        Gets the user_email of this ReportMetaData.
        Users Email

        :return: The user_email of this ReportMetaData.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """
        Sets the user_email of this ReportMetaData.
        Users Email

        :param user_email: The user_email of this ReportMetaData.
        :type: str
        """

        self._user_email = user_email

    @property
    def user_first_name(self):
        """
        Gets the user_first_name of this ReportMetaData.
        Users First Name

        :return: The user_first_name of this ReportMetaData.
        :rtype: str
        """
        return self._user_first_name

    @user_first_name.setter
    def user_first_name(self, user_first_name):
        """
        Sets the user_first_name of this ReportMetaData.
        Users First Name

        :param user_first_name: The user_first_name of this ReportMetaData.
        :type: str
        """

        self._user_first_name = user_first_name

    @property
    def user_last_name(self):
        """
        Gets the user_last_name of this ReportMetaData.
        Users Last Name

        :return: The user_last_name of this ReportMetaData.
        :rtype: str
        """
        return self._user_last_name

    @user_last_name.setter
    def user_last_name(self, user_last_name):
        """
        Sets the user_last_name of this ReportMetaData.
        Users Last Name

        :param user_last_name: The user_last_name of this ReportMetaData.
        :type: str
        """

        self._user_last_name = user_last_name

    @property
    def user_role(self):
        """
        Gets the user_role of this ReportMetaData.
        User Role

        :return: The user_role of this ReportMetaData.
        :rtype: str
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role):
        """
        Sets the user_role of this ReportMetaData.
        User Role

        :param user_role: The user_role of this ReportMetaData.
        :type: str
        """

        self._user_role = user_role

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
