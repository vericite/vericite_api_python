# coding: utf-8

"""
    VeriCiteLmsApiV1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ExternalContentData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, external_content_id=None, file_name=None, upload_content_length=None, upload_content_type=None):
        """
        ExternalContentData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'external_content_id': 'str',
            'file_name': 'str',
            'upload_content_length': 'int',
            'upload_content_type': 'str'
        }

        self.attribute_map = {
            'external_content_id': 'externalContentID',
            'file_name': 'fileName',
            'upload_content_length': 'uploadContentLength',
            'upload_content_type': 'uploadContentType'
        }

        self._external_content_id = external_content_id
        self._file_name = file_name
        self._upload_content_length = upload_content_length
        self._upload_content_type = upload_content_type


    @property
    def external_content_id(self):
        """
        Gets the external_content_id of this ExternalContentData.
        External Content ID

        :return: The external_content_id of this ExternalContentData.
        :rtype: str
        """
        return self._external_content_id

    @external_content_id.setter
    def external_content_id(self, external_content_id):
        """
        Sets the external_content_id of this ExternalContentData.
        External Content ID

        :param external_content_id: The external_content_id of this ExternalContentData.
        :type: str
        """
        if external_content_id is None:
            raise ValueError("Invalid value for `external_content_id`, must not be `None`")

        self._external_content_id = external_content_id

    @property
    def file_name(self):
        """
        Gets the file_name of this ExternalContentData.
        The name of the file

        :return: The file_name of this ExternalContentData.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this ExternalContentData.
        The name of the file

        :param file_name: The file_name of this ExternalContentData.
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")

        self._file_name = file_name

    @property
    def upload_content_length(self):
        """
        Gets the upload_content_length of this ExternalContentData.
        The content length of the file

        :return: The upload_content_length of this ExternalContentData.
        :rtype: int
        """
        return self._upload_content_length

    @upload_content_length.setter
    def upload_content_length(self, upload_content_length):
        """
        Sets the upload_content_length of this ExternalContentData.
        The content length of the file

        :param upload_content_length: The upload_content_length of this ExternalContentData.
        :type: int
        """
        if upload_content_length is None:
            raise ValueError("Invalid value for `upload_content_length`, must not be `None`")

        self._upload_content_length = upload_content_length

    @property
    def upload_content_type(self):
        """
        Gets the upload_content_type of this ExternalContentData.
        The content type of the file

        :return: The upload_content_type of this ExternalContentData.
        :rtype: str
        """
        return self._upload_content_type

    @upload_content_type.setter
    def upload_content_type(self, upload_content_type):
        """
        Sets the upload_content_type of this ExternalContentData.
        The content type of the file

        :param upload_content_type: The upload_content_type of this ExternalContentData.
        :type: str
        """
        if upload_content_type is None:
            raise ValueError("Invalid value for `upload_content_type`, must not be `None`")

        self._upload_content_type = upload_content_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
