# coding: utf-8

"""
    VeriCiteLmsApiV1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ReportsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_report_urls(self, context_id, assignment_id_filter, consumer, consumer_secret, token_user, token_user_role, **kwargs):
        """
        
        Retrieves URLS for the reports

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_report_urls(context_id, assignment_id_filter, consumer, consumer_secret, token_user, token_user_role, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str context_id: Context ID (required)
        :param str assignment_id_filter: ID of assignment to filter results on (required)
        :param str consumer: the consumer (required)
        :param str consumer_secret: the consumer secret (required)
        :param str token_user: ID of user who will view the report (required)
        :param str token_user_role: role of user who will view the report (required)
        :param str user_id_filter: ID of user to filter results on
        :param str external_content_id_filter: external content id to filter results on
        :param bool print_report_page: flag to indicate a request for the print report page URL
        :return: list[ReportURLLinkReponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_report_urls_with_http_info(context_id, assignment_id_filter, consumer, consumer_secret, token_user, token_user_role, **kwargs)
        else:
            (data) = self.get_report_urls_with_http_info(context_id, assignment_id_filter, consumer, consumer_secret, token_user, token_user_role, **kwargs)
            return data

    def get_report_urls_with_http_info(self, context_id, assignment_id_filter, consumer, consumer_secret, token_user, token_user_role, **kwargs):
        """
        
        Retrieves URLS for the reports

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_report_urls_with_http_info(context_id, assignment_id_filter, consumer, consumer_secret, token_user, token_user_role, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str context_id: Context ID (required)
        :param str assignment_id_filter: ID of assignment to filter results on (required)
        :param str consumer: the consumer (required)
        :param str consumer_secret: the consumer secret (required)
        :param str token_user: ID of user who will view the report (required)
        :param str token_user_role: role of user who will view the report (required)
        :param str user_id_filter: ID of user to filter results on
        :param str external_content_id_filter: external content id to filter results on
        :param bool print_report_page: flag to indicate a request for the print report page URL
        :return: list[ReportURLLinkReponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_id', 'assignment_id_filter', 'consumer', 'consumer_secret', 'token_user', 'token_user_role', 'user_id_filter', 'external_content_id_filter', 'print_report_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report_urls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params) or (params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `get_report_urls`")
        # verify the required parameter 'assignment_id_filter' is set
        if ('assignment_id_filter' not in params) or (params['assignment_id_filter'] is None):
            raise ValueError("Missing the required parameter `assignment_id_filter` when calling `get_report_urls`")
        # verify the required parameter 'consumer' is set
        if ('consumer' not in params) or (params['consumer'] is None):
            raise ValueError("Missing the required parameter `consumer` when calling `get_report_urls`")
        # verify the required parameter 'consumer_secret' is set
        if ('consumer_secret' not in params) or (params['consumer_secret'] is None):
            raise ValueError("Missing the required parameter `consumer_secret` when calling `get_report_urls`")
        # verify the required parameter 'token_user' is set
        if ('token_user' not in params) or (params['token_user'] is None):
            raise ValueError("Missing the required parameter `token_user` when calling `get_report_urls`")
        # verify the required parameter 'token_user_role' is set
        if ('token_user_role' not in params) or (params['token_user_role'] is None):
            raise ValueError("Missing the required parameter `token_user_role` when calling `get_report_urls`")


        collection_formats = {}

        resource_path = '/reports/urls/{contextID}'.replace('{format}', 'json')
        path_params = {}
        if 'context_id' in params:
            path_params['contextID'] = params['context_id']

        query_params = {}
        if 'assignment_id_filter' in params:
            query_params['assignmentIDFilter'] = params['assignment_id_filter']
        if 'user_id_filter' in params:
            query_params['userIDFilter'] = params['user_id_filter']
        if 'external_content_id_filter' in params:
            query_params['externalContentIDFilter'] = params['external_content_id_filter']
        if 'print_report_page' in params:
            query_params['printReportPage'] = params['print_report_page']
        if 'token_user' in params:
            query_params['tokenUser'] = params['token_user']
        if 'token_user_role' in params:
            query_params['tokenUserRole'] = params['token_user_role']

        header_params = {}
        if 'consumer' in params:
            header_params['consumer'] = params['consumer']
        if 'consumer_secret' in params:
            header_params['consumerSecret'] = params['consumer_secret']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ReportURLLinkReponse]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def get_scores(self, context_id, consumer, consumer_secret, **kwargs):
        """
        
        Retrieves scores for the reports

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_scores(context_id, consumer, consumer_secret, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str context_id: Context ID (required)
        :param str consumer: the consumer (required)
        :param str consumer_secret: the consumer secret (required)
        :param str assignment_id: ID of assignment
        :param str user_id: ID of user
        :param str external_content_id: external content id
        :return: list[ReportScoreReponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_scores_with_http_info(context_id, consumer, consumer_secret, **kwargs)
        else:
            (data) = self.get_scores_with_http_info(context_id, consumer, consumer_secret, **kwargs)
            return data

    def get_scores_with_http_info(self, context_id, consumer, consumer_secret, **kwargs):
        """
        
        Retrieves scores for the reports

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_scores_with_http_info(context_id, consumer, consumer_secret, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str context_id: Context ID (required)
        :param str consumer: the consumer (required)
        :param str consumer_secret: the consumer secret (required)
        :param str assignment_id: ID of assignment
        :param str user_id: ID of user
        :param str external_content_id: external content id
        :return: list[ReportScoreReponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_id', 'consumer', 'consumer_secret', 'assignment_id', 'user_id', 'external_content_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scores" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params) or (params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `get_scores`")
        # verify the required parameter 'consumer' is set
        if ('consumer' not in params) or (params['consumer'] is None):
            raise ValueError("Missing the required parameter `consumer` when calling `get_scores`")
        # verify the required parameter 'consumer_secret' is set
        if ('consumer_secret' not in params) or (params['consumer_secret'] is None):
            raise ValueError("Missing the required parameter `consumer_secret` when calling `get_scores`")


        collection_formats = {}

        resource_path = '/reports/scores/{contextID}'.replace('{format}', 'json')
        path_params = {}
        if 'context_id' in params:
            path_params['contextID'] = params['context_id']

        query_params = {}
        if 'assignment_id' in params:
            query_params['assignmentID'] = params['assignment_id']
        if 'user_id' in params:
            query_params['userID'] = params['user_id']
        if 'external_content_id' in params:
            query_params['externalContentID'] = params['external_content_id']

        header_params = {}
        if 'consumer' in params:
            header_params['consumer'] = params['consumer']
        if 'consumer_secret' in params:
            header_params['consumerSecret'] = params['consumer_secret']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ReportScoreReponse]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def submit_request(self, context_id, assignment_id, user_id, immediate_score_only, consumer, consumer_secret, report_meta_data, **kwargs):
        """
        
        Request a file submission

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.submit_request(context_id, assignment_id, user_id, immediate_score_only, consumer, consumer_secret, report_meta_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str context_id: Context ID (required)
        :param str assignment_id: ID of assignment (required)
        :param str user_id: ID of user (required)
        :param bool immediate_score_only: Will only run the report for immediate scoring (required)
        :param str consumer: the consumer (required)
        :param str consumer_secret: the consumer secret (required)
        :param ReportMetaData report_meta_data:  (required)
        :return: list[ExternalContentUploadInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_request_with_http_info(context_id, assignment_id, user_id, immediate_score_only, consumer, consumer_secret, report_meta_data, **kwargs)
        else:
            (data) = self.submit_request_with_http_info(context_id, assignment_id, user_id, immediate_score_only, consumer, consumer_secret, report_meta_data, **kwargs)
            return data

    def submit_request_with_http_info(self, context_id, assignment_id, user_id, immediate_score_only, consumer, consumer_secret, report_meta_data, **kwargs):
        """
        
        Request a file submission

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.submit_request_with_http_info(context_id, assignment_id, user_id, immediate_score_only, consumer, consumer_secret, report_meta_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str context_id: Context ID (required)
        :param str assignment_id: ID of assignment (required)
        :param str user_id: ID of user (required)
        :param bool immediate_score_only: Will only run the report for immediate scoring (required)
        :param str consumer: the consumer (required)
        :param str consumer_secret: the consumer secret (required)
        :param ReportMetaData report_meta_data:  (required)
        :return: list[ExternalContentUploadInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_id', 'assignment_id', 'user_id', 'immediate_score_only', 'consumer', 'consumer_secret', 'report_meta_data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params) or (params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `submit_request`")
        # verify the required parameter 'assignment_id' is set
        if ('assignment_id' not in params) or (params['assignment_id'] is None):
            raise ValueError("Missing the required parameter `assignment_id` when calling `submit_request`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `submit_request`")
        # verify the required parameter 'immediate_score_only' is set
        if ('immediate_score_only' not in params) or (params['immediate_score_only'] is None):
            raise ValueError("Missing the required parameter `immediate_score_only` when calling `submit_request`")
        # verify the required parameter 'consumer' is set
        if ('consumer' not in params) or (params['consumer'] is None):
            raise ValueError("Missing the required parameter `consumer` when calling `submit_request`")
        # verify the required parameter 'consumer_secret' is set
        if ('consumer_secret' not in params) or (params['consumer_secret'] is None):
            raise ValueError("Missing the required parameter `consumer_secret` when calling `submit_request`")
        # verify the required parameter 'report_meta_data' is set
        if ('report_meta_data' not in params) or (params['report_meta_data'] is None):
            raise ValueError("Missing the required parameter `report_meta_data` when calling `submit_request`")


        collection_formats = {}

        resource_path = '/reports/submit/request/{contextID}/{assignmentID}/{userID}'.replace('{format}', 'json')
        path_params = {}
        if 'context_id' in params:
            path_params['contextID'] = params['context_id']
        if 'assignment_id' in params:
            path_params['assignmentID'] = params['assignment_id']
        if 'user_id' in params:
            path_params['userID'] = params['user_id']

        query_params = {}
        if 'immediate_score_only' in params:
            query_params['immediateScoreOnly'] = params['immediate_score_only']

        header_params = {}
        if 'consumer' in params:
            header_params['consumer'] = params['consumer']
        if 'consumer_secret' in params:
            header_params['consumerSecret'] = params['consumer_secret']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'report_meta_data' in params:
            body_params = params['report_meta_data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ExternalContentUploadInfo]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)
